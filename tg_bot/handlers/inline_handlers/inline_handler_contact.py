from aiogram import F
from aiogram import Router
from aiogram.types import CallbackQuery
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from tg_bot.crm_logic.alfa_crm_api import get_client_lessons
from tg_bot.database.engine import session_maker
from tg_bot.database.orm_query import orm_get_user_by_tg_id, get_manager_info
from logger_config import get_logger
from tg_bot.middlewares.middleware_database import DataBaseSession

logger = get_logger()

manager_contact_router: Router = Router()
manager_contact_router.callback_query.middleware(DataBaseSession(session_pool=session_maker))


@manager_contact_router.callback_query(F.data == 'contact_manager' or F.data == 'work_off')
async def process_button_manager_contact_press(callback: CallbackQuery, session: AsyncSession):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        await callback.message.answer(text='–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–µ–π—á–∞—Å –º—ã –ø–æ–∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ.. üòÅ')
        user = await orm_get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.message.answer(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        user_branch_ids = list(map(int, user.user_branch_ids.split(',')))
        user_crm_id = user.user_crm_id
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã branch_ids: {user_branch_ids} –∏ user_crm_id: {user_crm_id}")

        user_lessons = await get_client_lessons(user_crm_id, user_branch_ids)
        if not user_lessons.get("items"):
            logger.info(f"–£—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å crm_id {user_crm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback.message.answer(text="–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        lesson = user_lessons.get("items", [])[0]
        lesson_address = lesson.get("room_id", 0)
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω –∞–¥—Ä–µ—Å —É—Ä–æ–∫–∞: {lesson_address}")
        if lesson_address:
            info = await get_manager_info(session, lesson_address)
            if info:
                answer_text = f"–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:\n{info.manager}\n{info.link}"
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
                await callback.message.answer(text=answer_text)
            else:
                logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–∞ {lesson_address} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.message.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            logger.warning(f"–ê–¥—Ä–µ—Å —É—Ä–æ–∫–∞ –¥–ª—è CRM ID {user_crm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.message.answer(text="–ê–¥—Ä–µ—Å —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await callback.message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await callback.message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    finally:
        await callback.answer()
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")


@manager_contact_router.callback_query(F.data == 'lead_contact_manager_lead')
async def process_button_lead_contact_press(callback: CallbackQuery, session: AsyncSession):
    logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'lead_contact_manager_lead'")
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}")

    response_text = '–ú–µ–Ω–µ–¥–∂–µ—Ä –ï–≤–≥–µ–Ω–∏–π:\nhttps://t.me/EvgeniyKIBERone'

    try:
        await callback.message.answer(text=response_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}: {response_text}")
        await callback.answer()
        logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
